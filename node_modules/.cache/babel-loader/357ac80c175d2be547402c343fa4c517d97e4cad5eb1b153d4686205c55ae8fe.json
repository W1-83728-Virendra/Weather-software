{"ast":null,"code":"var _jsxFileName = \"/home/virendra/weather-app/src/Weather.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n\n// const API_KEY = \"c37e8f114500b7bc29e9ef219c43cbab\"; // Replace with your OpenWeather API key\n// const API_URL = \"https://api.openweathermap.org/data/2.5/weather\";\n\n// function Weather() {\n//     const [city, setCity] = useState(\"\");\n//     const [weather, setWeather] = useState(null);\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState(\"\");\n\n//     const fetchWeather = async () => {\n//         if (!city) {\n//             setError(\"Please enter a city name.\");\n//             return;\n//         }\n\n//         setLoading(true);\n//         setError(\"\");\n\n//         try {\n//             const response = await axios.get(`${API_URL}`, {\n//                 params: {\n//                     q: city,\n//                     appid: API_KEY,\n//                     units: \"metric\",\n//                 },\n//             });\n//             setWeather(response.data);\n//         } catch (err) {\n//             setError(\"City not found. Please try again.\");\n//             setWeather(null);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"weather-container\">\n//             <input\n//                 type=\"text\"\n//                 placeholder=\"Enter city name\"\n//                 value={city}\n//                 onChange={(e) => setCity(e.target.value)}\n//             />\n//             <button onClick={fetchWeather}>Get Weather</button>\n\n//             {loading && <p>Loading...</p>}\n//             {error && <p className=\"error\">{error}</p>}\n\n//             {weather && (\n//                 <div className=\"weather-info\">\n//                     <h2>{weather.name}</h2>\n//                     <p>Temperature: {weather.main.temp}Â°C</p>\n//                     <p>Condition: {weather.weather[0].description}</p>\n//                     <img\n//                         src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n//                         alt={weather.weather[0].description}\n//                     />\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default Weather;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"YOUR_API_KEY\"; // Replace with your OpenWeather API key\nconst API_URL = \"https://api.openweathermap.org/data/2.5/weather\";\nfunction Weather() {\n  _s();\n  const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [favorites, setFavorites] = useState([]);\n\n  // Load favorites from local storage on mount\n  useEffect(() => {\n    const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\")) || [];\n    setFavorites(savedFavorites);\n  }, []);\n  const fetchWeather = async cityName => {\n    if (!cityName) {\n      setError(\"Please enter a city name.\");\n      return;\n    }\n    setLoading(true);\n    setError(\"\");\n    try {\n      const response = await axios.get(API_URL, {\n        params: {\n          q: cityName,\n          appid: API_KEY,\n          units: \"metric\"\n        }\n      });\n      setWeather(response.data);\n    } catch (err) {\n      setError(\"City not found. Please try again.\");\n      setWeather(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addToFavorites = () => {\n    if (weather && !favorites.includes(weather.name)) {\n      const newFavorites = [...favorites, weather.name];\n      setFavorites(newFavorites);\n      localStorage.setItem(\"favorites\", JSON.stringify(newFavorites));\n    }\n  };\n  const removeFavorite = cityName => {\n    const updatedFavorites = favorites.filter(fav => fav !== cityName);\n    setFavorites(updatedFavorites);\n    localStorage.setItem(\"favorites\", JSON.stringify(updatedFavorites));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter city name\",\n      value: city,\n      onChange: e => setCity(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => fetchWeather(city),\n      children: \"Get Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 23\n    }, this), weather && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: weather.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", weather.main.temp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Condition: \", weather.weather[0].description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Humidity: \", weather.main.humidity, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wind Speed: \", weather.wind.speed, \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`,\n        alt: weather.weather[0].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"fav-btn\",\n        onClick: addToFavorites,\n        children: \"\\u2B50 Add to Favorites\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }, this), favorites.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"favorites\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u2B50 Favorite Cities\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: favorites.map(favCity => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => fetchWeather(favCity),\n            children: favCity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeFavorite(favCity),\n            children: \"\\u274C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 33\n          }, this)]\n        }, favCity, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n}\n_s(Weather, \"0c/w/1YUnevNQcGMtqbX2d4740E=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","API_KEY","API_URL","Weather","_s","city","setCity","weather","setWeather","loading","setLoading","error","setError","favorites","setFavorites","savedFavorites","JSON","parse","localStorage","getItem","fetchWeather","cityName","response","get","params","q","appid","units","data","err","addToFavorites","includes","name","newFavorites","setItem","stringify","removeFavorite","updatedFavorites","filter","fav","className","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","main","temp","description","humidity","wind","speed","src","icon","alt","length","map","favCity","_c","$RefreshReg$"],"sources":["/home/virendra/weather-app/src/Weather.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import axios from \"axios\";\n\n// const API_KEY = \"c37e8f114500b7bc29e9ef219c43cbab\"; // Replace with your OpenWeather API key\n// const API_URL = \"https://api.openweathermap.org/data/2.5/weather\";\n\n// function Weather() {\n//     const [city, setCity] = useState(\"\");\n//     const [weather, setWeather] = useState(null);\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState(\"\");\n\n//     const fetchWeather = async () => {\n//         if (!city) {\n//             setError(\"Please enter a city name.\");\n//             return;\n//         }\n\n//         setLoading(true);\n//         setError(\"\");\n\n//         try {\n//             const response = await axios.get(`${API_URL}`, {\n//                 params: {\n//                     q: city,\n//                     appid: API_KEY,\n//                     units: \"metric\",\n//                 },\n//             });\n//             setWeather(response.data);\n//         } catch (err) {\n//             setError(\"City not found. Please try again.\");\n//             setWeather(null);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"weather-container\">\n//             <input\n//                 type=\"text\"\n//                 placeholder=\"Enter city name\"\n//                 value={city}\n//                 onChange={(e) => setCity(e.target.value)}\n//             />\n//             <button onClick={fetchWeather}>Get Weather</button>\n\n//             {loading && <p>Loading...</p>}\n//             {error && <p className=\"error\">{error}</p>}\n\n//             {weather && (\n//                 <div className=\"weather-info\">\n//                     <h2>{weather.name}</h2>\n//                     <p>Temperature: {weather.main.temp}Â°C</p>\n//                     <p>Condition: {weather.weather[0].description}</p>\n//                     <img\n//                         src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n//                         alt={weather.weather[0].description}\n//                     />\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default Weather;\n\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst API_KEY = \"YOUR_API_KEY\"; // Replace with your OpenWeather API key\nconst API_URL = \"https://api.openweathermap.org/data/2.5/weather\";\n\nfunction Weather() {\n    const [city, setCity] = useState(\"\");\n    const [weather, setWeather] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(\"\");\n    const [favorites, setFavorites] = useState([]);\n\n    // Load favorites from local storage on mount\n    useEffect(() => {\n        const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\")) || [];\n        setFavorites(savedFavorites);\n    }, []);\n\n    const fetchWeather = async (cityName) => {\n        if (!cityName) {\n            setError(\"Please enter a city name.\");\n            return;\n        }\n\n        setLoading(true);\n        setError(\"\");\n\n        try {\n            const response = await axios.get(API_URL, {\n                params: { q: cityName, appid: API_KEY, units: \"metric\" },\n            });\n            setWeather(response.data);\n        } catch (err) {\n            setError(\"City not found. Please try again.\");\n            setWeather(null);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const addToFavorites = () => {\n        if (weather && !favorites.includes(weather.name)) {\n            const newFavorites = [...favorites, weather.name];\n            setFavorites(newFavorites);\n            localStorage.setItem(\"favorites\", JSON.stringify(newFavorites));\n        }\n    };\n\n    const removeFavorite = (cityName) => {\n        const updatedFavorites = favorites.filter((fav) => fav !== cityName);\n        setFavorites(updatedFavorites);\n        localStorage.setItem(\"favorites\", JSON.stringify(updatedFavorites));\n    };\n\n    return (\n        <div className=\"weather-container\">\n            <input\n                type=\"text\"\n                placeholder=\"Enter city name\"\n                value={city}\n                onChange={(e) => setCity(e.target.value)}\n            />\n            <button onClick={() => fetchWeather(city)}>Get Weather</button>\n\n            {loading && <p>Loading...</p>}\n            {error && <p className=\"error\">{error}</p>}\n\n            {weather && (\n                <div className=\"weather-info\">\n                    <h2>{weather.name}</h2>\n                    <p>Temperature: {weather.main.temp}Â°C</p>\n                    <p>Condition: {weather.weather[0].description}</p>\n                    <p>Humidity: {weather.main.humidity}%</p>\n                    <p>Wind Speed: {weather.wind.speed} m/s</p>\n                    <img\n                        src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                        alt={weather.weather[0].description}\n                    />\n                    <button className=\"fav-btn\" onClick={addToFavorites}>â­ Add to Favorites</button>\n                </div>\n            )}\n\n            {favorites.length > 0 && (\n                <div className=\"favorites\">\n                    <h3>â­ Favorite Cities</h3>\n                    <ul>\n                        {favorites.map((favCity) => (\n                            <li key={favCity}>\n                                <span onClick={() => fetchWeather(favCity)}>{favCity}</span>\n                                <button onClick={() => removeFavorite(favCity)}>â</button>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default Weather;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}